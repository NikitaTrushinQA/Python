-----------------------------------------------------------------------------------Мемоизация--------------------------------------------
Для решения проблемы повторного вычисления чисел Фибоначчи можно использовать механизм мемоизации.

Мемоизация – это способ оптимизации, при котором сохраняется результат выполнения функции, и этот результат используется при следующем вызове.

Перепишем функцию fib() с использованием мемоизации:

cache = {1: 1, 2: 1}                # ключ - номер числа, значение - число Фибоначчи 

def fib(n):
    result = cache.get(n)
    if result is None:
        result = fib(n - 2) + fib(n - 1)
        cache[n] = result
    return result
При такой реализации функции fib() сначала происходит проверка на наличие уже вычисленного элемента, и если он найден, то сразу возвращается его значение.

Приведенная выше реализация функции fib() хороша с точки зрения производительности, поскольку теперь мы не вычисляем много раз одно и то же число Фибоначчи.
Но её недостатком является то, что она использует глобальную переменную cache.

Как мы уже знаем, устранить такой недостаток можно с помощью вложенных функций:

def fib(n):
    ​cache = {1: 1, 2: 1}
    def fib_rec(n):
        result = cache.get(n)
        if result is None:
            result = fib_rec(n - 2) + fib_rec(n - 1)
            cache[n] = result
        return result
    return fib_rec(n)
