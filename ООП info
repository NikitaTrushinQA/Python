                                                                                                                  Принципы ООП

Абстракция

Абстракция — это использование только тех характеристик объекта, которые с достаточной точностью представляют его в данной системе. Основная идея состоит в том,
чтобы представить объект минимальным набором атрибутов и методов и при этом с достаточной точностью для решаемой задачи.

Абстракция является основой объектно-ориентированного программирования и позволяет работать с объектами, не вдаваясь в особенности их реализации.
Пользователь типа не имеет прямого доступа к его реализации, но может работать с данными через предоставленный набор операций. Преимущество абстракции данных в разделении операций над данными и внутреннего представления этих данных,
что позволяет изменять реализацию, не затрагивая пользователей данного типа.

Пример 1. Объекту класса Программист вряд ли понадобятся свойства "умение готовить еду" или "любимый цвет". Они не влияют на его особенности как программиста.
А вот "основной язык программирования" и "рабочие навыки" — важные свойства, без которых программиста не опишешь.

Пример 2. Человек, управляющий скутером, знает, что при нажатии на гудок издается звук, но зачастую он не имеет представления о том, как на самом деле этот звук создается при нажатии на гудок.

   Принцип абстракции позволяет нам скрывать детали и раскрывать только основные черты объекта.
Инкапсуляция


Инкапсуляция имеет два основных смысла. С одной стороны, она объединяет атрибуты и методы в одном объекте. С другой стороны, инкапсуляция обозначает сокрытие данных, то есть невозможность напрямую получить доступ к внутренней структуре объекта,
так как это может быть небезопасно. Например, наполнить желудок едой можно напрямую, положив еду в желудок.
Но это опасно. Поэтому прямой доступ к желудку закрыт. Чтобы наполнить его едой, нужно совершить ритуал через элемент интерфейса под названием рот.

Принцип инкапсуляции позволяет объектам содержать как свои данные, так и поведение, а также скрывать то, что ему потребуется, от внешнего программного кода.
Наследование

Наследование — способ создания класса на основе уже существующего, при котором дочерний класс заимствует атрибуты и методы родительского класса, а также добавляет собственные.

Дочерний класс часто называют производным классом, наследником или потомком, а родительский класс – предком или просто родителем.

Проведем аналогию с реальным миром. Если мы возьмем конкретный стол, то это объект, но не класс. А вот общее представление о столах, их назначении – это класс.
Ему принадлежат все реальные объекты столов, какими бы они ни были. Класс столов дает общую характеристику всем столам в мире, описывая их общие свойства.
Однако можно разделить все столы на письменные,
обеденные и журнальные и для каждой группы создать свой класс, который будет наследником общего класса, но помимо этого будет вносить ряд своих особенностей.




dir() - Для получения списка всех атрибутов и методов объекта можно воспользоваться встроенной функцией dir()
__dict__ -Все атрибуты, которыми мы наделяем созданные объекты, хранятся в специальном словаре, который доступен в качестве атрибута __dict__


                                                                                                       Функции, работающие с атрибутами

                                                                                                   Функция getattr() принимает три аргумента:

    obj — объект
    name — имя атрибута
    default — значение по умолчанию

Функция возвращает значение атрибута name объекта obj. Если объект obj не имеет атрибута name, возвращается значение по умолчанию default. Если значение по умолчанию не указано, возбуждается исключение AttributeError.

                                                                                                                   Функция setattr()

Функция setattr() принимает три аргумента:

    obj — объект
    name — имя атрибута
    value — значение атрибута

Функция устанавливает объекту obj атрибут name со значением value. Если объект obj уже имеет атрибут name, его значение перезаписывается.

                                                                                                               Функция delattr()

Функция delattr() принимает два аргумента:

    obj — объект
    name — имя атрибута

Функция удаляет атрибут name у объекта obj. Если объект не имеет атрибута name, возбуждается исключение AttributeError.

                                                                                                                Функция hasattr()

Функция hasattr() принимает два аргумента:

    obj — объект
    name — имя атрибута

Функция возвращает True, если объект obj имеет атрибут name, или False в противном случае.
---------------------------------------------------------------------------------------------------------------------Методы экземпляра класса-------------------------------------------------------------------------------------------------------------------------
Метод экземпляра — это функция, которая определена внутри класса, принадлежит объекту этого класса и имеет доступ к атрибутам объекта.

Параметр self требуется в каждом методе экземпляра. Метод оперирует атрибутами конкретного объекта, и когда метод исполняется, он должен знать, атрибутами какого объекта он должен оперировать.
Именно здесь на первый план выходит параметр self. Когда метод вызывается, Python делает так, что параметр self ссылается на конкретный объект, который его вызвал в данный момент и которым вызванный метод должен оперировать.

    Параметр self часто называют контекстным объектом.

                                                                                                                         Метод __init__()

После создания экземпляра данного класса мы получаем объект, у которого нет никаких атрибутов. И если нам требуется, чтобы объект ими обладал, нам приходится определять их вручную для каждого объекта, либо определять атрибуты на уровне класса.
Очевидно, оба способа имеют свои недостатки, так как в первом случае нам приходится определять каждый атрибут для каждого объекта, во втором случае — все экземпляры класса имеют атрибуты с одними и теми же значениями, что не всегда нужно.
Решить данную проблему позволяет специальный метод __init__().

    Метод __init__() называют методом инициализации или инициализатором.

Метод __init__() инициализирует атрибуты объекта. Сразу после создания объекта исполняется метод __init__(), и параметру self автоматически присваивается объект, который был только что создан, что позволяет тут же наделить его необходимыми атрибутами.

----------------------------------------------------------------------------------------------------------------------------Модификаторы доступа-----------------------------------------------------------------------------------------------------------------
С точки зрения разграничения доступа к атрибутам Python является особенным языком — в нем отсутствует механизм, который мог бы запретить внешнему коду взаимодействовать с атрибутами объекта или класса. Вместо этого создатели Python предложили следующий ряд соглашений:

    если имя атрибута начинается с одного нижнего подчеркивания (_name), то он считается защищенным
    если имя атрибута начинается с двух нижних подчеркиваний (__name), то он считается приватным

В Python все атрибуты являются публичными по умолчанию. Любой атрибут объекта может быть доступен за пределами класса, независимо от того, является он публичным, защищенным или приватным.

Любой атрибут вида __name текстуально заменяется на _class__name, где class — это имя текущего класса.

class Cat:
    def __init__(self, name):
        self.__name = name


cat = Cat('Кемаль')

cat._Cat__name = 'Роджер'

print(cat.__dict__)

выводит:

{'_Cat__name': 'Роджер'}

--------------------------------------------------------------------------------------------------------------------------------Методы аксессоры------------------------------------------------------------------------------------------------------------------

                                                                                                                                  ------Геттеры-----------

Метод, который возвращает значение атрибута и при этом не изменяет его, называется геттером. Геттеры дают возможность программному коду, находящемуся за пределами класса, получать значения атрибутов безопасным способом,
не подвергая эти атрибуты изменению программным кодом, находящимся вне метода.

class Cat:
    def __init__(self, name):
        self._name = name                               # имя кошки

    def get_name(self):                                 # геттер, используется для получения имени
        return self._name


cat = Cat('Кемаль')

print(cat.get_name())

выводит:

Кемаль

                                                                                                                                  -----Сеттеры---------

Метод, который сохраняет значение в атрибуте либо изменяет значение атрибута, называется сеттером. Сеттеры могут управлять тем, как атрибуты объекта изменяются. Когда программный код,
находящийся вне класса, должен изменить в объекте значение атрибута, он, как правило, вызывает сеттер и передает новое значение в качестве аргумента. Если это необходимо, то метод, прежде чем он присвоит значение атрибуту, может выполнить проверку этого значения.

 Приведенный ниже код:

class Cat:
    def __init__(self, name):
        self._name = name

    def get_name(self):
        return self._name

    def set_name(self, name):                           # сеттер, используется для изменения имени
        if isinstance(name, str) and name.isalpha():    # проверка имени перед заменой
            self._name = name
        else:
            raise ValueError('Некорректное имя')


cat = Cat('Кемаль')
print(cat.get_name())

cat.set_name('Роджер')
print(cat.get_name())

выводит:

Кемаль
Роджер

                                                                                                                                   ----Делитеры---------

Метод, который удаляет атрибут из объекта, называется делитером. 

Приведенный ниже код:

class Cat:
    def __init__(self, name):
        self._name = name

    def get_name(self):
        return self._name

    def set_name(self, name):
        if isinstance(name, str) and name.isalpha():
            self._name = name
        else:
            raise ValueError('Некорректное имя')

    def del_name(self):                                 # делитер, используется для удаления имени
        del self._name


cat = Cat('Кемаль')

cat.del_name()

print(cat.get_name())

приводит к возбуждению исключения AttributeError:

AttributeError: 'Cat' object has no attribute '_name'



