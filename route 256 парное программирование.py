#H. Парное программирование (10 баллов)
#ограничение по времени на тест1 секунда
#ограничение по памяти на тест512 мегабайт
#вводстандартный ввод
#выводстандартный вывод
#В компании работает n разработчиков, где n — четное число. Сумасшедший менеджер решил разбить всех разработчиков на команды по два человека.

#Для этого он составил список всех разработчиков и назначил каждому из них номер по списку (от 1 до n) и значение ai — уровень мастерства i-го в списке разработчика.

#Очередную команду он составляет следующим образом:

#первый разработчик в команде тот, кто идет первым в списке;
#ему в пару подбирается такой, что разница их уровней минимальна (то есть минимально значение |ai−aj|, где |x| — это модуль числа x); если таких кандидатов несколько, то выбирается из них тот, кто находится раньше в списке;
#эти два разработчика образуют команду и удаляются из списка.
#Например, если массив a равен [2,1,3,1,1,4], то формирование команд будет происходить следующим образом:

#назначим разработчикам номера [1,2,3,4,5,6] в соответствии с их положением в списке, первый среди них имеет номер 1, его уровень мастерства a1=2, подходящими (с минимальной абсолютной разностью) являются разработчики с номерами 2,3,4,5, первый среди них 2, таким образом первая команда — это разработчики с номерами 1 и 2;
#оставшиеся разработчики теперь имеют номера [3,4,5,6], первый среди них 3, его уровень a3=3, разработчик с минимальной абсолютной разностью только один (номер 6), таким образом команда — разработчики с номерами 3 и 6;
#оставшиеся разработчики имеют номера [4,5], первый среди них 4, его уровень a4=1, остался только разработчик с номером 5, таким образом третья команда — разработчики с номерами 4 и 5.
#Ваша задача — помочь сумасшедшему менеджеру промоделировать процесс разбиения на команды. Обратите внимание, что команды должны быть выведены в порядке, описанном выше в условии.

#Входные данные
#Первая строка содержит одно целое число t (1≤t≤50) — количество наборов входных данных.

#Первая строка каждого набора содержит одно целое число n (2≤n≤50; n четное) — количество разработчиков.

#Вторая строка содержит n целых чисел a1,a2,…,an (1≤ai≤100), где ai — уровень мастерства i-го разработчика.

#Выходные данные
#Для каждого набора входных данных выведите n/2 строк, i-я строка должна содержать пару чисел — номер первого и второго разработчика в i-й команде в порядке, описанном в условии.

#Выводите пустую строку между выводами для наборов входных данных.


def pairs_programming(lvls):
    lvls_list_copy = lvls
    index_of_lvls = [k for k in range(1, len(lvls_list_copy) + 1)] # список с индексами
    result = []  # список с парами сотрудников
    while len(lvls_list_copy) > 0:
        delta = []  # список разниц рангов
        for i in range(1, len(lvls_list_copy)):  #
            x = abs(lvls_list_copy[0] - lvls_list_copy[i])  #
            delta.append(x)  # добавляем разницу в список
        min_lvl = min(delta)  # находим минимальный ранг среди всех
        index_of_min_lvl = delta.index(min_lvl)  # находим индекс минимальной разницы
        result.append([index_of_lvls[0], index_of_lvls[index_of_min_lvl + 1]])
        #убираем элементы которые добавили в result
        lvls_list_copy.pop(0)
        lvls_list_copy.pop(index_of_min_lvl)
        index_of_lvls.pop(0)
        index_of_lvls.pop(index_of_min_lvl)
    return result


t = int(input())  # вводим количество наборов  ,  1<=t<=10**4
for i in range(t):
    n = int(input())  # вводим количество сотрудников, n - четное число  1<= n <= 50
    lvls = [int(j) for j in input().split()]  # список из вводимых уровней работников
    for pairs in pairs_programming(lvls):
        print(*pairs, end='\n')
    print()




