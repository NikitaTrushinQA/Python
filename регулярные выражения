сырые строки и экранирование
В языке Python некоторые символы нужно экранировать, чтобы они воспринимались правильно. К таким символам относятся:

обратный слэш \
одинарная кавычка '
двойная кавычка "
и многие другие


Метасимвол     	Диапазон	         Описание
\d	               [0-9]	         любая цифра
\D	              [^0-9]	         любой нецифровой символ
\w	         [0-9a-zA-Zа-яА-ЯёЁ_] 	любой алфавитно-цифровой символ и символ _
\W        	[^0-9a-zA-Zа-яА-ЯёЁ_]	  любой символ, отличный от алфавитно-цифрового и _
\s	         [ \f\n\r\t\v]	         любой пробельный символ
\S	        [^ \f\n\r\t\v]	         любой непробельный символ

Шаблон	 Описание
{n}	     ровно n повторений
{m,n}	    от m до n повторений включительно
{m,}	   не менее m повторений
{,n}	   не более n повторений
?	        ноль или одно вхождение, синоним {0,1}
*	        ноль или более, синоним {0,}
+	        одно или более, синоним {1,}

-------------------------------------------------------------------------------------------------Жадность и ленивость---------------------------------------------------------------------
Рассмотрим регулярное выражение, которое находит любой текст внутри тегов <B></B>:

<B>.*</B>
Такому выражению в тексте:

Подписку нельзя оформить клиентам, живущим в <B>России</B>, а также <B>Беларуси</B>. Приносим свои извинения.
соответствует (выделено жирным шрифтом):

Подписку нельзя оформить клиентам, живущим в <B>России</B>, а также <B>Беларуси</B>. Приносим свои извинения.
Метасимволы * и + являются жадными, то есть они ищут наибольшее возможное соответствие, а не наименьшее.
Из-за этого кажется, что соответствие начинается не с начала, а с конца текста и продолжается назад (в направлении к началу), пока не будет найдено следующее соответствие.

Если нам не нужно жадное поведение, то необходимо использовать ленивые аналоги этих метасимволов (они называются ленивыми, потому что устанавливают соответствие с наименьшим,
а не с наибольшим возможным количеством символов).

Ленивые метасимволы определяются путем добавления в конец ? к используемому метасимволу, причем для каждого жадного метасимвола имеется ленивый эквивалент.

Жадный	Ленивый
*	         *?
+	         +?
?	         ??
{m,n}	    {m,n}?
{,n}	    {,n}?
{m,}	    {m,}?

Регулярному выражению:
<B>.*?</B>
в тексте:

Подписку нельзя оформить клиентам, живущим в <B>России</B>, а также <B>Беларуси</B>. Приносим свои извинения.
соответствует (выделено жирным шрифтом):

 <B>России</B> <B>Беларуси</B>
Используя ленивый метасимвол *?, мы добились правильного результата.

-------------------------------------------------------------------------------------Границы слова--------------------------------------------------------
Символ \b указывает границу слова. Таким образом, \b соответствует началу или концу слова.

Регулярному выражению:
\bcat\b

в тексте:
The cat scattered his food all over the room.                #cat

Определение границ строк
Границы слов позволяют указать местонахождение совпадений относительно позиции в слове (начало слова, конец слова, полностью слово). Границы строк выполняют подобную функцию, но используются для нахождения соответствий с шаблоном регулярного выражения в начале или конце всей строки.

Метасимволы для границ строк – крышка ^ (начало строки) и доллар $ (конец строки).

Регулярному выражению:

^[Hh]ello
в тексте:
Hello, Timur. I haven't seen you for ages. I want to be his favorite hello and his hardest goodb                 #Hello

------------------------------------------------------------------------------------Ссылки назад---------------------------------------------------------------------------------------------------
Предположим, что в тексте нужно найти все подряд повторяющиеся слова, то есть опечатки, где то же самое слово было по ошибке напечатано дважды.
Очевидно, что при поиске второго вхождения слова должно быть известно предыдущее слово. Ссылки назад позволяют в регулярном выражении обратиться к предыдущим совпадениям (в данном случае к ранее найденному слову).

Регулярному выражению:

(\b\w+\b)[ ]+\1
в тексте:

Это текст, в котором котором несколько слов    слов повторяются, хотя они и не   не должны повторяться повторяться.       (котором которок,слов    слов, не   не,повторяться повторяться)

Термин ссылка назад обозначает объект, который ссылается назад на предыдущее выражение.
Таким образом, выражение \1 соответствует первому подвыражению, используемому в регулярном выражении. Выражение \2 соответствует второму подвыражению, \3 – третьему и т.д.

Регулярному выражению:

<[Hh]([1-6])>.*</[Hh]\1>
в тексте:

<BODY>
<H1>Добро пожаловать на курсы BEEGEEK</H1>
Мы считаем, что настоящий программист должен понимать, как работает компьютер, обладать аналитическим мышлением и не бояться математики.
Следующие курсы:
<H2>ООП</H2>
<h2>Алгоритмы и структуры данных</h3>
Оставайтесь с нами!
</BODY>

соответствует :
<H1>Добро пожаловать на курсы BEEGEEK</H1>
<H2>ООП</H2>


