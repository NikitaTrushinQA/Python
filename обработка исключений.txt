                                                                       ОБРАБОТКА ИСКЛЮЧЕНИЙ 

Типы ошибок
Разработка программы на любом языке программирования практически всегда бывает связана с возникновением различного рода ошибок,
препятствующих получению желаемого результата.

Обычно выделяют следующие три категории ошибок:

-синтаксические – возникают из-за синтаксических погрешностей кода
-логические – проявляются вследствие логических неточностей в алгоритме
-ошибки времени выполнения, исключения – вызваны некорректными действиями пользователя или системы.

                                                                        СИНТАКСИЧЕСКИЕ ОШИБКИ
Синтаксические ошибки являются следствием несоблюдения общепринятого синтаксиса языка. Другими словами, это ошибки, связанные с неправильно набранным кодом.
Например пропуск круглой скобки, запятой или двоеточия.

В приведенном ниже коде:

print('Hello, world!'
допущена одна синтаксическая ошибка: пропущена закрывающая скобка. При попытке его запуска получим:

SyntaxError: '(' was never closed
В приведенном ниже коде:

def square(num)
    return num ** 2
допущена также синтаксическая ошибка: пропущен символ двоеточия в описании функции. При попытке его запуска получим:

    def square(num)
                   ^
SyntaxError: expected ':'
Синтаксические ошибки легко отлавливаются интерпретатором, который сразу же сообщает программисту о проблеме в написанном коде. 

                                                                            ЛОГИЧЕСКИЕ ОШИБКИ
Логические ошибки считаются более сложными в выявлении, поскольку не отлавливаются интерпретатором.
 Обычно они вызваны определенным недостатком в логике программы, из-за чего результат работы программы отличается от желаемого результата.
 Возможным решением проблемы является тестирование программы на разных примерах входных данных, для которых известен правильный результат.

В приведенном ниже коде:

def avg(a, b):
    return a + b / 2
описана функция avg(), подсчитывающая среднее значение переданных в нее аргументов. В теле функции допущена логическая ошибка, пропущены скобки, на два должна делиться сумма чисел a и b.

Приведенный ниже код:

print(avg(6, 14))
выводит неверный результат:

13.0
Обратите внимание на то, что приведенная выше функция avg() не всегда работает неверно.

Приведенный ниже код:

print(avg(0, 7))
выводит верный результат:

3.5
Логические ошибки могут проявлять себя только при определенных условиях. Часто код с логической ошибкой может работать достаточно долго.

                                                                                  ОШИБКИ ВРЕМЕНИ ИСПОЛНЕНИЯ
Исключения представляют собой еще один вид ошибок, которые проявляются в зависимости от наличия обстоятельств, меняющих ход выполнения программы.
Исключения являются ошибками времени выполнения,возникающие в процессе выполнения программы и связанные с некорректностью переданных в программу данных, недоступностью ресурсов и т.д.

Приведенный ниже код:

num1 = 10
num2 = 0

print(num1 / num2)
выводит:

ZeroDivisionError: division by zero
Деление на ноль провоцирует исключительную ситуацию, которая приводит к аварийному завершению работы и выводу ошибки на экран. ZeroDivisionError — это название исключения, а division by zero — его краткое описание.

Если мы хотим, чтобы программа работала с широким диапазоном входных данных и внешних условий, то надо учитывать исключения, программа должна их верно обрабатывать.

По умолчанию при обнаружении необработанного исключения Python немедленно останавливает выполнение программы и выводит сообщение об ошибке.

                                                                                   РАБОТА С КОДАМИ ВОЗВРАТА
В эпоху расцвета процедурного программирования синтаксис работы с исключениями был тривиален и основывался на том, что вернула функция. Если функция возвращала True — все хорошо, если же False — то произошла ошибка. При этом сразу выделились два подхода к работе с ошибками:

подход два в одном — функция возвращает False как для ожидаемой, так и для неожиданной ошибки. Такой подход как правило применялся в API общего назначения и коде пользовательских программ, когда большую часть ошибок можно было смело считать фатальными
подход разделения ошибок, при котором функция возвращает False в случае неожиданной ошибки, а ожидаемую ошибку возвращает отдельным возвращаемым значением (числовым). Такой подход применялся в более надежном коде и подразумевал разделение на ожидаемые ошибки и неожиданные
Для каждой ошибки можно придумать свой код возврата. Коды не должны совпадать с возможными обычными ответами.

Несмотря на то что язык Python полностью поддерживает работу с исключениями, как с полноценными объектами, мы все же можем встретить следы работы с кодами возврата, которые Python унаследовал от языка C.

Строковый тип данных str содержит два похожих метода find() и index(). Оба метода выполняют одну и ту же работу, а именно ищут позицию первого вхождения подстроки в заданную строку. Однако в случае если подстрока не найдена, то поведение методов отличается. Метод find() использует механизм кодов возврата, в то время как метод index() возбуждает исключение.

Приведенный ниже код:

text = 'Hello, world!'

print(text.find('w'))
print(text.find('a'))
выводит:

7
-1
Из-за того что в строке Hello, world! нет символа a, нам было возвращено значение −1. Это и есть код возврата.

Приведенный ниже код:

text = 'Hello, world!'

print(text.index('a'))
приводит к возникновению исключения:

ValueError: substring not found
При работе с кодами возврата даже простая функция для обработки пользовательских данных обрастает дополнительным кодом, проверкой многих условий и «магическими» кодами возврата. Если функция с кодом возврата находится глубоко в стеке вызовов, то придется сделать так, чтобы ее правильно обрабатывала вся вышестоящая цепочка функций. Каждая из них должна принимать код и возвращать свой.