# Декоратор exception_decorator
# Реализуйте декоратор exception_decorator, который возвращает
#
# кортеж (value, 'Функция выполнилась без ошибок'), если декорируемая функция завершила свою работу без ошибок,
# где value — возвращаемое значение декорируемой функции
# кортеж (None, 'При вызове функции произошла ошибка'), если при выполнении декорируемой функции возникла ошибка
# Примечание 1. Не забывайте про то, что декоратор не должен поглощать возвращаемое значение декорируемой функции,
# а также должен уметь декорировать функции с произвольным количеством позиционных и именованных аргументов.
#
# Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимый декоратор exception_decorator, но не код, вызывающий его.

# Sample Input 2:
# sum = exception_decorator(sum)
# print(sum(['199', '1', 187]))
#
# Sample Output 2:
# (None, 'При вызове функции произошла ошибка')


def exception_decorator(func):
    def wrapper(*args,**kwargs):
        try:
            return (func(*args,**kwargs),'Функция выполнилась без ошибок')
        except:
            return (None, 'При вызове функции произошла ошибка')
    return wrapper




@exception_decorator
def f(*args, **kwargs):
    return sum(args) + sum(kwargs.values())


print(f(1, 2, 3, param1=4, param2=10))
#(20, 'Функция выполнилась без ошибок')